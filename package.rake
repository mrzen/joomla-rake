require_relative 'helpers'
require_relative 'manifest_generators'

desc "Generate Package Manifest"
task :package_manifest do
  require 'builder'

  manifest_path = File.join(build_area, 'pkg_' + $package['name'] + '.xml')
  manifest_file = File.open(manifest_path, 'w')

  manifest = Builder::XmlMarkup.new(:indent => 2, :target => manifest_file)
  manifest.extension({:type => "package" , :version => $package['package']['version']}) do |ext|
    ext.comment! "Package Manifest Generated by Builder Script at #{Time.now}"
    ext.name $package['package']['name']
    ext.description $package['package']['description']
    ext.author $package['package']['author']
    ext.packagename $package['name']
    ext.update $package['package']['update_site']

    ext.files do |package_part|
      $package['contents']['components'].each do |component|
        ext.file({:type => "component" , :id => component} , "com_#{component}.zip")
      end # Components

      $package['contents']['plugins'].keys.each do |group|
        $package['contents']['plugins'][group].each do |plugin|
          ext.file({:type => "plugin" , :id => plugin , :group => group}, "plg_#{group}_#{plugin}.zip")
        end # Plugins
      end   # Plugin Groups

      $package['contents']['libraries'].each do |library|
        ext.file({:type => "library", :id => library}, "lib_#{library}.zip")
      end # Libraries
    end # Package Parts
  end # Document (Extension)

  manifest.target!
  manifest_file.flush
  manifest_file.close
end
  
# Prepare files in `package_files` for packaging
directory build_area => [:build_libraries, :build_components, :build_plugins, :package_manifest]

# Build the package zip
desc 'Build package zip archive'
task :package => [package_file_path]

file package_file_path => [build_area] do
  chdir(build_area) do
    sh "zip -r ../#{package_name}.zip *.zip pkg_#{$package['name']}.xml"
  end
end
